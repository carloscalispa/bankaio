import 'package:flutter_test/flutter_test.dart';
import 'package:integration_test/integration_test.dart';
import 'package:bankaio/main_emuladores.dart' as app;
import 'package:bankaio/core/firebase/firebase_initializer.dart';
import 'package:bankaio/core/test_helpers/auth_test_helper.dart';
import 'package:flutter/material.dart';

/// Funci√≥n helper mejorada para esperar widgets con mejor logging y manejo de errores
Future<void> pumpUntilFound(
  WidgetTester tester,
  Finder finder, {
  Duration timeout = const Duration(seconds: 15),
  String? description,
}) async {
  final end = DateTime.now().add(timeout);
  int attempts = 0;
  final desc = description ?? finder.toString();
  
  debugPrint('üîç Buscando widget: $desc');
  
  while (DateTime.now().isBefore(end)) {
    await tester.pump(const Duration(milliseconds: 100));
    if (finder.evaluate().isNotEmpty) {
      debugPrint('‚úÖ Widget encontrado: $desc');
      return;
    }
    if (attempts % 20 == 0) {
      debugPrint('‚è≥ Esperando widget ($attempts intentos): $desc');
    }
    attempts++;
  }
  
  // Logging adicional para debugging
  debugPrint('‚ùå Widget no encontrado despu√©s de $attempts intentos: $desc');
  debugPrint('üîç Widgets disponibles:');
  final allWidgets = find.byType(Widget);
  for (final element in allWidgets.evaluate().take(10)) {
    debugPrint('  - ${element.widget.runtimeType}');
  }
  
  throw TestFailure('‚ùå Widget no encontrado despu√©s de ${timeout.inSeconds}s: $desc');
}

/// Helper para esperar que no haya widgets de carga
Future<void> waitForNoLoadingIndicators(WidgetTester tester) async {
  await tester.pumpAndSettle();
  const maxWait = Duration(seconds: 10);
  final endTime = DateTime.now().add(maxWait);
  
  while (DateTime.now().isBefore(endTime)) {
    if (find.byType(CircularProgressIndicator).evaluate().isEmpty) {
      debugPrint('‚úÖ No hay indicadores de carga');
      return;
    }
    debugPrint('‚è≥ Esperando que termine la carga...');
    await tester.pump(const Duration(milliseconds: 500));
  }
  
  debugPrint('‚ö†Ô∏è Timeout esperando que termine la carga');
}

/// Helper para verificar que aparezca un SnackBar con mensaje espec√≠fico
Future<void> expectSnackBarWithMessage(
  WidgetTester tester, 
  String expectedMessage, {
  Duration timeout = const Duration(seconds: 5),
}) async {
  debugPrint('üîç Esperando SnackBar con mensaje: "$expectedMessage"');
  
  final end = DateTime.now().add(timeout);
  while (DateTime.now().isBefore(end)) {
    await tester.pump(const Duration(milliseconds: 100));
    
    final snackBars = find.byType(SnackBar);
    if (snackBars.evaluate().isNotEmpty) {
      final snackBarFinder = find.descendant(
        of: snackBars.first,
        matching: find.textContaining(expectedMessage),
      );
      
      if (snackBarFinder.evaluate().isNotEmpty) {
        debugPrint('‚úÖ SnackBar encontrado con mensaje esperado');
        return;
      }
    }
  }
  
  throw TestFailure('‚ùå SnackBar con mensaje "$expectedMessage" no encontrado');
}

/// Helper para verificar que estamos en la pantalla de login
Future<void> ensureLoginScreen(WidgetTester tester) async {
  debugPrint('üîç Verificando que estamos en pantalla de login...');
  
  // Buscar elementos clave de la pantalla de login
  final usuarioText = find.text('Usuario');
  final passwordText = find.text('Contrase√±a');
  final loginButton = find.byKey(const Key('login_button'));
  
  // Si ya estamos en login, salir
  if (usuarioText.evaluate().isNotEmpty && 
      passwordText.evaluate().isNotEmpty && 
      loginButton.evaluate().isNotEmpty) {
    debugPrint('‚úÖ Ya estamos en pantalla de login');
    return;
  }
  
  // Verificar si estamos en home y necesitamos hacer logout
  final homeText = find.text('Bienvenido al Home');
  if (homeText.evaluate().isNotEmpty) {
    debugPrint('üîÑ Estamos en Home, forzando logout...');
    await forceLogoutAndNavigateToLogin(tester);
  } else {
    // Si no estamos ni en home ni en login, reiniciar la app
    debugPrint('üîÑ Estado desconocido, reiniciando app...');
    await restartApp(tester);
  }
  
  // Verificar que ahora estamos en login
  await pumpUntilFound(
    tester, 
    usuarioText, 
    timeout: const Duration(seconds: 15),
    description: 'Texto Usuario en login'
  );
  
  await pumpUntilFound(
    tester, 
    passwordText, 
    timeout: const Duration(seconds: 5),
    description: 'Texto Contrase√±a en login'
  );
  
  debugPrint('‚úÖ Confirmado que estamos en pantalla de login');
}

/// Helper para limpiar el estado de la app entre tests
Future<void> clearAppState(WidgetTester tester) async {
  debugPrint('üßπ Limpiando estado de la app...');
  await tester.pumpAndSettle();
  // Cerrar cualquier SnackBar abierto
  if (find.byType(SnackBar).evaluate().isNotEmpty) {
    await tester.pump(const Duration(seconds: 4)); // SnackBars se cierran solos
  }
  await tester.pumpAndSettle();
}

/// Helper para reiniciar la aplicaci√≥n y volver a login
Future<void> restartApp(WidgetTester tester) async {
  debugPrint('üîÑ Reiniciando aplicaci√≥n...');
  
  // Limpiar estado de autenticaci√≥n primero
  await AuthTestHelper.clearAuthState();
  
  // Esperar a que el estado de autenticaci√≥n se propague
  await AuthTestHelper.waitForAuthStateChange();
  
  debugPrint('üîÑ Reiniciando aplicaci√≥n main...');
  
  // Reiniciar la app
  await app.main();
  
  // Esperar mucho m√°s tiempo para que la app se inicialice y el AuthListener procese el cambio
  await tester.pumpAndSettle(const Duration(seconds: 5));
  
  // Hacer pumps adicionales para procesar el estado de autenticaci√≥n
  for (int i = 0; i < 20; i++) {
    await tester.pump(const Duration(milliseconds: 500));
    
    // Verificar si tenemos elementos de login
    final usuarioText = find.text('Usuario');
    final passwordText = find.text('Contrase√±a');
    
    if (usuarioText.evaluate().isNotEmpty && passwordText.evaluate().isNotEmpty) {
      debugPrint('‚úÖ Aplicaci√≥n reiniciada exitosamente - Login detectado en pump $i');
      return;
    }
    
    // Verificar si estamos en home (lo que no queremos)
    final homeText = find.text('Bienvenido al Home');
    if (homeText.evaluate().isNotEmpty) {
      debugPrint('‚ö†Ô∏è A√∫n en Home en pump $i, continuando...');
    }
  }
  
  debugPrint('‚ö†Ô∏è No se detect√≥ login despu√©s de reiniciar, pero continuando...');
}

/// Helper para forzar logout y navegar a login
Future<void> forceLogoutAndNavigateToLogin(WidgetTester tester) async {
  debugPrint('üîÑ Forzando logout y navegaci√≥n a login...');
  
  // Hacer logout
  await AuthTestHelper.clearAuthState();
  
  // Esperar que el AuthListener procese el cambio y usar el router redirect
  await tester.pumpAndSettle(const Duration(seconds: 2));
  
  // Reiniciar la app para forzar que el router haga redirect
  await app.main();
  await tester.pumpAndSettle(const Duration(seconds: 3));
  
  // Hacer pumps para permitir navegaci√≥n
  for (int i = 0; i < 50; i++) {
    await tester.pump(const Duration(milliseconds: 200));
    
    final usuarioText = find.text('Usuario');
    if (usuarioText.evaluate().isNotEmpty) {
      debugPrint('‚úÖ Navegaci√≥n a login exitosa en pump $i');
      return;
    }
    
    // Verificar si seguimos en home
    final homeText = find.text('Bienvenido al Home');
    if (homeText.evaluate().isNotEmpty && i % 10 == 0) {
      debugPrint('‚ö†Ô∏è A√∫n en Home en pump $i, continuando...');
    }
  }
  
  debugPrint('‚ö†Ô∏è No se pudo navegar a login despu√©s del logout');
}

void main() {
  IntegrationTestWidgetsFlutterBinding.ensureInitialized();

  setUpAll(() async {
    debugPrint('üîß Inicializando Firebase con emuladores...');
    await initializeFirebaseApp(useEmulators: true);
    debugPrint('‚úÖ Firebase inicializado');
    
    // Verificar conexi√≥n con emuladores
    await AuthTestHelper.verifyEmulatorConnection();
    
    // Limpiar cualquier estado previo
    await AuthTestHelper.clearAuthState();
    debugPrint('‚úÖ Estado inicial limpiado');
  });

  group('Login Backend States Integration Test', () {
    setUp(() async {
      debugPrint('üîÑ Configurando test...');
      // Limpiar estado de autenticaci√≥n antes de cada test
      await AuthTestHelper.clearAuthState();
      await Future.delayed(const Duration(milliseconds: 500));
    });

    tearDown(() async {
      debugPrint('üßπ Limpiando despu√©s del test...');
      // Limpiar estado de autenticaci√≥n despu√©s de cada test
      await AuthTestHelper.clearAuthState();
      await Future.delayed(const Duration(milliseconds: 500));
    });

    testWidgets('Login exitoso navega a home', (tester) async {
      debugPrint('üöÄ Iniciando test: Login exitoso navega a home');
      await ensureLoginScreen(tester);

      // Verificar que estamos en la pantalla de login
      await pumpUntilFound(
        tester, 
        find.text('Usuario'), 
        description: 'Texto Usuario en login'
      );
      await pumpUntilFound(
        tester, 
        find.text('Contrase√±a'), 
        description: 'Texto Contrase√±a en login'
      );

      // Encontrar y llenar campos
      await pumpUntilFound(
        tester, 
        find.byKey(const Key('email_field')),
        description: 'Campo de email'
      );
      await tester.enterText(find.byKey(const Key('email_field')), 'ccalispa@yahoo.es');
      
      await pumpUntilFound(
        tester, 
        find.byKey(const Key('password_field')),
        description: 'Campo de contrase√±a'
      );
      await tester.enterText(find.byKey(const Key('password_field')), 'carlitos1001');

      // Presionar bot√≥n de login
      await pumpUntilFound(
        tester, 
        find.byKey(const Key('login_button')),
        description: 'Bot√≥n de login'
      );
      
      // Verificar que el bot√≥n dice "Ingresar"
      expect(find.text('Ingresar'), findsOneWidget);
      
      await tester.tap(find.byKey(const Key('login_button')));
      await tester.pump(const Duration(milliseconds: 500)); // Iniciar navegaci√≥n

      // Esperar proceso de autenticaci√≥n con debugging mejorado
      debugPrint('‚è≥ Esperando proceso de autenticaci√≥n...');
      bool loginSuccessful = false;
      
      // Aumentar timeout y mejorar el manejo
      for (int attempt = 0; attempt < 30; attempt++) { // 30 segundos m√°ximo
        await tester.pump(const Duration(seconds: 1));
        
        // Verificar si ya estamos en home
        final homeText = find.byKey(const Key('welcome_home_text'));
        if (homeText.evaluate().isNotEmpty) {
          debugPrint('‚úÖ Login exitoso detectado en intento $attempt');
          loginSuccessful = true;
          break;
        }
        
        // Verificar si hubo error
        final errorSnackBar = find.byType(SnackBar);
        if (errorSnackBar.evaluate().isNotEmpty) {
          debugPrint('‚ùå Error detectado durante el login en intento $attempt');
          // Obtener texto del error
          final snackBarText = find.descendant(
            of: errorSnackBar.first,
            matching: find.byType(Text),
          );
          if (snackBarText.evaluate().isNotEmpty) {
            final textWidget = snackBarText.first.evaluate().first.widget as Text;
            debugPrint('Error: ${textWidget.data}');
          }
          throw TestFailure('‚ùå Error durante el login');
        }
        
        // Log del progreso cada 5 segundos
        if (attempt % 5 == 0) {
          debugPrint('‚è≥ Esperando... ($attempt/30 segundos)');
          
          // Verificar si hay indicadores de carga
          final loadingIndicators = find.byType(CircularProgressIndicator);
          if (loadingIndicators.evaluate().isNotEmpty) {
            debugPrint('  - Indicador de carga presente');
          }
        }
      }
      
      if (!loginSuccessful) {
        debugPrint('‚ùå Login no completado despu√©s de 30 segundos');
        debugPrint('üîç Estado final del √°rbol de widgets:');
        final allTexts = find.byType(Text);
        for (final element in allTexts.evaluate().take(15)) {
          final textWidget = element.widget as Text;
          final textData = textWidget.data ?? textWidget.textSpan?.toPlainText() ?? '';
          debugPrint('  - "$textData"');
        }
        
        throw TestFailure('‚ùå No se pudo completar el login en 30 segundos');
      }

      // Verificar navegaci√≥n exitosa a home
      await pumpUntilFound(
        tester, 
        find.byKey(const Key('welcome_home_text')), 
        timeout: const Duration(seconds: 5),
        description: 'Texto de bienvenida en home'
      );
      
      // Verificaciones adicionales en home
      expect(find.byKey(const Key('welcome_home_text')), findsOneWidget);
      expect(find.text('Bienvenido al Home'), findsOneWidget);
      
      debugPrint('‚úÖ Test de login exitoso pas√≥');
    });

    testWidgets('Login con campos vac√≠os muestra error espec√≠fico', (tester) async {
      debugPrint('üöÄ Iniciando test: Login con campos vac√≠os');
      await ensureLoginScreen(tester);

      // Verificar que estamos en la pantalla de login
      await pumpUntilFound(
        tester, 
        find.byKey(const Key('login_button')),
        description: 'Bot√≥n de login'
      );
      
      // Presionar login sin llenar campos
      await tester.tap(find.byKey(const Key('login_button')));
      await tester.pumpAndSettle(const Duration(seconds: 2));

      // Verificar que aparece un SnackBar con error
      expect(find.byType(SnackBar), findsOneWidget);
      
      // Esperar a que el SnackBar desaparezca
      await clearAppState(tester);
      debugPrint('‚úÖ Test de campos vac√≠os pas√≥');
    });

    testWidgets('Login con contrase√±a incorrecta muestra error espec√≠fico', (tester) async {
      debugPrint('üöÄ Iniciando test: Login con contrase√±a incorrecta');
      await ensureLoginScreen(tester);

      // Llenar campos con datos incorrectos
      await pumpUntilFound(
        tester, 
        find.byKey(const Key('email_field')),
        description: 'Campo de email'
      );
      await tester.enterText(find.byKey(const Key('email_field')), 'ccalispa@yahoo.es');
      
      await pumpUntilFound(
        tester, 
        find.byKey(const Key('password_field')),
        description: 'Campo de contrase√±a'
      );
      await tester.enterText(find.byKey(const Key('password_field')), 'contrase√±a_incorrecta');

      await pumpUntilFound(
        tester, 
        find.byKey(const Key('login_button')),
        description: 'Bot√≥n de login'
      );
      await tester.tap(find.byKey(const Key('login_button')));
      
      // Esperar que termine el proceso de autenticaci√≥n
      await waitForNoLoadingIndicators(tester);
      await tester.pumpAndSettle(const Duration(seconds: 3));

      // Verificar que aparece error
      expect(find.byType(SnackBar), findsOneWidget);
      
      // Verificar que NO navegamos a home (seguimos en login)
      expect(find.byKey(const Key('welcome_home_text')), findsNothing);
      expect(find.byKey(const Key('login_button')), findsOneWidget);
      
      await clearAppState(tester);
      debugPrint('‚úÖ Test de contrase√±a incorrecta pas√≥');
    });

    testWidgets('Login con email inv√°lido muestra error de validaci√≥n', (tester) async {
      debugPrint('üöÄ Iniciando test: Login con email inv√°lido');
      await ensureLoginScreen(tester);

      // Llenar campos con email inv√°lido
      await pumpUntilFound(
        tester, 
        find.byKey(const Key('email_field')),
        description: 'Campo de email'
      );
      await tester.enterText(find.byKey(const Key('email_field')), 'email_invalido');
      
      await pumpUntilFound(
        tester, 
        find.byKey(const Key('password_field')),
        description: 'Campo de contrase√±a'
      );
      await tester.enterText(find.byKey(const Key('password_field')), 'cualquier_password');

      await pumpUntilFound(
        tester, 
        find.byKey(const Key('login_button')),
        description: 'Bot√≥n de login'
      );
      await tester.tap(find.byKey(const Key('login_button')));
      
      await waitForNoLoadingIndicators(tester);
      await tester.pumpAndSettle(const Duration(seconds: 3));

      // Verificar que aparece error y NO navegamos
      expect(find.byType(SnackBar), findsOneWidget);
      expect(find.byKey(const Key('welcome_home_text')), findsNothing);
      
      await clearAppState(tester);
      debugPrint('‚úÖ Test de email inv√°lido pas√≥');
    });

    testWidgets('Interfaz de login contiene todos los elementos esperados', (tester) async {
      debugPrint('üöÄ Iniciando test: Verificaci√≥n de interfaz completa');
      await ensureLoginScreen(tester);

      // Verificar elementos de la interfaz
      expect(find.text('Usuario'), findsOneWidget);
      expect(find.text('Contrase√±a'), findsOneWidget);
      expect(find.text('Ingresar'), findsOneWidget);
      expect(find.text('¬øOlvidaste tu contrase√±a?'), findsOneWidget);
      expect(find.text('¬øNo tienes cuenta? Reg√≠strate'), findsOneWidget);
      
      // Verificar campos por key
      expect(find.byKey(const Key('email_field')), findsOneWidget);
      expect(find.byKey(const Key('password_field')), findsOneWidget);
      expect(find.byKey(const Key('login_button')), findsOneWidget);
      
      // Verificar que el campo de contrase√±a est√° oculto inicialmente
      final passwordField = tester.widget<TextField>(find.byKey(const Key('password_field')));
      expect(passwordField.obscureText, isTrue);
      
      // Verificar logo
      expect(find.byType(Image), findsOneWidget);
      
      debugPrint('‚úÖ Test de interfaz completa pas√≥');
    });

    testWidgets('Toggle de visibilidad de contrase√±a funciona', (tester) async {
      debugPrint('üöÄ Iniciando test: Toggle de visibilidad de contrase√±a');
      await ensureLoginScreen(tester);

      // Encontrar el campo de contrase√±a
      await pumpUntilFound(
        tester, 
        find.byKey(const Key('password_field')),
        description: 'Campo de contrase√±a'
      );
      
      // Verificar que inicialmente est√° oculto
      TextField passwordField = tester.widget<TextField>(find.byKey(const Key('password_field')));
      expect(passwordField.obscureText, isTrue);
      
      // Encontrar y presionar el bot√≥n de visibilidad
      final visibilityButton = find.descendant(
        of: find.byKey(const Key('password_field')),
        matching: find.byType(IconButton),
      );
      expect(visibilityButton, findsOneWidget);
      
      await tester.tap(visibilityButton);
      await tester.pump();
      
      // Verificar que ahora est√° visible
      passwordField = tester.widget<TextField>(find.byKey(const Key('password_field')));
      expect(passwordField.obscureText, isFalse);
      
      // Presionar de nuevo para ocultarlo
      await tester.tap(visibilityButton);
      await tester.pump();
      
      passwordField = tester.widget<TextField>(find.byKey(const Key('password_field')));
      expect(passwordField.obscureText, isTrue);
      
      debugPrint('‚úÖ Test de toggle de visibilidad pas√≥');
    });
  });
}
